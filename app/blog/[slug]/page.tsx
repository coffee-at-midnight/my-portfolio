import type { Metadata } from "next";
import { notFound } from "next/navigation";
import { CustomMDX } from "app/components/mdx";
import { formatDate, getBlogPosts } from "app/lib/posts";
import { metaData } from "app/config";

// Generate array of slugs to statically generate pages for each blog post
async function generateStaticParams() {
  // Retrieve list of blog posts and store in variable
  let posts = getBlogPosts();
  return posts.map((post) => ({
    slug: post.slug,
  }));
}

// params is object generated by a route
async function generateMetadata({params,}): Promise<Metadata | undefined> {
  // Find a blog post that matches current slug of route
  let post = getBlogPosts().find((post) => post.slug === params.slug);
  // Handling missing post (Has no metadata)
  if (!post) {
    return;
  }
  // Extracting metadata from post frontmatter
  let {title,publishedAt: publishedTime,summary: description,image,} = post.metadata;
  let ogImage = image ? image: `${metaData.baseUrl}/og?title=${encodeURIComponent(title)}`;
  return {title, description, openGraph: {title, description, type: "article", publishedTime, url: `${metaData.baseUrl}/blog/${post.slug}`, images: [{url: ogImage,},],}, twitter: {card: "summary_large_image", title, description, images: [ogImage],},};
}

// Create variables for slugs of previous post
function getPrevSlug(slug) {
  const posts = getBlogPosts();
  const currentIndex = posts.findIndex((post) => post.slug === slug);
  if (currentIndex > 0) {
    return posts[currentIndex - 1].slug;
  }
  return null;
}

// Create variables for slugs of next post
function getNextSlug(slug) {
  const posts = getBlogPosts();
  const currentIndex = posts.findIndex((post) => post.slug === slug);
  if (currentIndex < posts.length - 1) {
    return posts[currentIndex + 1].slug;
  }
  return null;
}

// React component to display blog based on given slug parameter
export default function Blog({ params }) {
  let post = getBlogPosts().find((post) => post.slug === params.slug);
  // Invoke notFound function if post/slug doesn't exist
  if (!post) {
    notFound();
  }
  let prevSlug = getPrevSlug(params.slug);
  let nextSlug = getNextSlug(params.slug);
  return (
    <section>
      <script type="application/ld+json" suppressHydrationWarning dangerouslySetInnerHTML={{__html: JSON.stringify({"@context": "https://schema.org", "@type": "BlogPosting", headline: post.metadata.title, datePublished: post.metadata.publishedAt, dateModified: post.metadata.publishedAt, description: post.metadata.summary, image: post.metadata.image ? `${metaData.baseUrl}${post.metadata.image}`: `/og?title=${encodeURIComponent(post.metadata.title)}`, url: `${metaData.baseUrl}/blog/${post.slug}`, author: {"@type": "Person", name: metaData.name,},}),}}/>
      <a href="/blog" className="inline-block mb-5 rounded-lg border-2 border-black px-4 py-2 text-neutral-600 dark:text-neutral-400 dark:border-white hover:bg-gray-100 transition duration-300">Back</a>
      <h1 className="title mb-3 font-bold text-3xl tracking-tight">
        {post.metadata.title}
      </h1>
      <div className="flex justify-between items-center mt-2 mb-8 text-medium">
        <p className="text-sm text-neutral-600 dark:text-neutral-400">
          {formatDate(post.metadata.publishedAt)}
        </p>
        <p className="text-sm text-neutral-600 dark:text-neutral-400"> Written by {metaData.name}</p>
      </div>
      <article className="prose prose-quoteless prose-neutral dark:prose-invert mt-10">
        <CustomMDX source={post.content} content={post.content}/>
      </article>
      <hr className="mb-5 mt-5"/>
      <div>
      {prevSlug && (<a href={`/blog/${prevSlug}`} className="inline-block mb-5 rounded-lg border-2 border-black px-4 py-2 text-neutral-600 dark:text-neutral-400 dark:border-white hover:bg-gray-100 transition duration-300">Prev</a>)}
      {nextSlug && (<a href={`/blog/${nextSlug}`} className="inline-block mb-5 rounded-lg border-2 border-black px-4 py-2 text-neutral-600 dark:text-neutral-400 dark:border-white hover:bg-gray-100 transition duration-300 float-right">Next</a>)}
      </div>
    </section>
  );
}
